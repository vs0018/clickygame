{"version":3,"sources":["components/ImgCard/index.js","components/Nav/index.js","components/Wrapper/index.js","components/Title/index.js","App.js","serviceWorker.js","index.js"],"names":["ImgCard","props","react_default","a","createElement","className","value","id","onClick","handleClick","alt","name","src","image","Nav","href","title","announce","score","topScore","Wrapper","children","Title","App","state","images","currentScore","clicked","resetGame","_this","setState","handleShuffle","shuffledImgs","array","i","length","j","Math","floor","random","temp","shuffleArray","handleIncrement","newScore","indexOf","console","log","concat","_this2","this","components_Wrapper","components_Nav","components_Title","map","components_ImgCard","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1e39f0c1.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nconst ImgCard = props => (\n  <div \n    className=\"card\" \n    value={props.id} \n    onClick={() => props.handleClick(props.id)}\n  >\n    <div className=\"img-container\">\n      <img alt={props.name} src={props.image} />\n    </div>\n  </div>\n);\n\nexport default ImgCard;\n","import React from \"react\";\nimport \"./style.css\";\n\nconst Nav = props => (\n  <nav>\n    <ul>\n      <li className=\"brand animated lightSpeedIn\">\n        <a href=\"/clicky-game/\">{props.title}</a>\n      </li>\n\n      <li id=\"rw\">{props.announce}</li>\n\n      <li id=\"cur-sco\">Current Score: {props.score}</li>\n\n      <li id=\"top-sco\">Top Score: {props.topScore}</li>\n    </ul>\n  </nav>\n);\n\nexport default Nav;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Title(props) {\n  return <h1 className=\"title\">{props.children}</h1>;\n}\n\nexport default Title;\n","import React, { Component } from \"react\";\nimport ImgCard from \"./components/ImgCard\";\nimport Nav from \"./components/Nav\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport images from \"./images.json\";\n\n// Shuffle memory game images\nfunction shuffleArray(array) {\n  let i = array.length - 1;\n  for (; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    const temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n  return array;\n};\n\nclass App extends Component {\n  // Setting this.state.images to the images json array\n  state = {\n    images,\n    \"currentScore\": 0,\n    \"topScore\": 0,\n    \"announce\": \"\",\n    \"clicked\": []\n  };\n\n  resetGame = () => {\n    this.setState({\n      currentScore: 0,\n      topScore: this.state.topScore,\n      announce: \"Sorry, try again!\",\n      clicked: []\n    });\n    this.handleShuffle();\n  };\n\n  handleShuffle = () => {\n    let shuffledImgs = shuffleArray(images);\n    this.setState({ images: shuffledImgs });\n  };\n\n  handleIncrement = () => {\n    const newScore = this.state.currentScore + 1;\n    this.setState({\n      currentScore: newScore,\n      announce: \"\"\n    });\n    if (newScore >= this.state.topScore) {\n      this.setState({ topScore: newScore });\n    }\n    else if (newScore === 12) {\n      this.setState({ announce: \"You win!\" });\n    }\n    this.handleShuffle();\n  };\n\n  // handleDecrement decreases this.state.count by 1\n  handleClick = id => {\n    if (this.state.clicked.indexOf(id) === -1) {\n      this.handleIncrement();\n      console.log(id);\n      this.setState({ clicked: this.state.clicked.concat(id) });\n    } else {\n      this.resetGame();\n    }\n  }\n\n  // Map over this.state.friends and render a FriendCard component for each friend object\n  render() {\n    return (\n      <Wrapper>\n        <Nav\n          title=\"Clicky Game\"\n          score={this.state.currentScore}\n          topScore={this.state.topScore}\n          announce={this.state.announce}\n        />\n        <Title>Test your memory! Click on the pictures, but only once! If you click on the same picture twice - game over!</Title>\n        {this.state.images.map(image => (\n          <ImgCard\n            key={image.id}\n            handleClick={this.handleClick}\n            handleIncrement={this.handleIncrement}\n            resetGame={this.resetGame}\n            handleShuffle={this.handleShuffle}\n            id={image.id}\n            image={image.image}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}